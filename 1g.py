# Compute the Hamming distance between two DNA strings.

# Given: Two DNA strings.

# Return: An integer value representing the Hamming distance.

seqA='GCACGCATGTGTGGTCCAGCTTACGTAAGATTGAGGCCGGCGATAACATGGAGCGTTCGGCAGTGAGGGCTCGGCTGAGGTTAGTAGATCGCGGTACAGATATAGAGGTGGCCAGCTGACCTCATCAACCGGCTTCTGGCCGACGAACCTGAGTCGCAAATAACACCGATCCCGTTTTCCTACGCGTTGGGCGGGTCGTACGTAGCTCTCGTGTCGTCTTAGGTTGTGGACCTATTACTTCTAGTTATTCTGGTGGGCTGACCATCAAGGACCAAACCGCGGACTGCGGAGTTTGAAGTTAAAATGGCAAAAGACGCTAGCAGAACTCCGCTCAGACATATACTAAGGGCCGGCATTCGATCGAGGAACGAGCCAGAGCCCGAAAACGGCTATGAGTCCTATCTGACGCTGCCTATATCCGCGTTCCCAAATGGTGGTCTGTCGAGCTGTATGCCCGGGAAACTAGTTATATTAAATTACGTTCGTTTATCGAGGTGCCCTAGACGGTTGAGCATGTTGCTGACTTGACTGATTCAGTTTAGTCGTGGGTTATGCGGAAATCACCCACAGATGGAAGAGTGTCAGGGGTCACTATCGAAGCGTCTGGATCATAAATTCGTTACAGCACAATCCGTGTCGGAGATTGAAGTTACTCTGGTGTCGGTTCGCAAAAACACCGGGGAGCCAGGGCCTTCCAACCTCTATGTGACTCTGCGACGAGAGCGCCCTTTACCCCGTAGCCTCGAAACAGACACCGCCCCGACGTTATTCTGGTGTCAATAACCGTCCAGTACTCCTGTCTCGGGACACTGATGCGCGTAACTACTGAAGCGTATATTGACCGAAGGAACTCCGTGGAACTGAATACGGGCCATACTTTATATCGCAATTTAAATGCTTTCGCAGTCGGTATGCTCGTTCCTAAGCTGGTGACTTCGGAGTCTGCGAGCGCCAACTCTATCCTGCTATGAGAAACGAAAATTCGCGGTATGACAGACTATCTCAAGCAATGCGCGAGGTAGCTCGATGCCTGCGAGGCATAAACTCCGGCTAGTAAGATACCAACCGCAGACTTCGGCGCGGATTCGG'
seqB='GCGTTCTCTGCCTGAGCTAGATAATTTTCAGCAGCCAGTAACTACGACTGTTTCCATCCCTTTGGTAGATATCAGACAACTGGTCGAACAAAGGTTAAACCCTGCATGATAGTTAATTTTCAGTGGCGCTGTATTCTCCTATCAAGCATTGCTCTTGCGTCGGAACTCAGCAGAAGGCGACAGGGGGGCCACCGGGTCACGATGTATACTCGGCCTCCAGAGGCATCCTTCCTTAAACGGATCCTTCGTGCAAACTCACAGGAACTCTTTCTTACGCGGCAGGCGGGATGGCCTCATGCTTATTGTAGGAGGTTGTAGGCATATCTTTTCCATACAAGGATCCTCTGGATTTCCCTACACTAAAAGCTTCTTTAACGAGCTGCCGGGGACGGGAGCTATTAGGCCTGGCTAAAGCAGCCATGTCTCTCCTCTGAGGTTTGCTCCCGCGCTCTCACATAGCCGGCAAGTCCGGCAAAGAGGCTTCCATACTCAATCCGGGATATCCCAACGGCGGAGTTTCGTTCTGAGCTTGCTGTTCTCCACGCGAAGAATCTAGTCCAATGTTGAGGAACCCAGCCGCCCTTACGATAATCATCCCTATCTTCAGCCACCTTTGACCTGCATCGGATCTCTCTTATCCGGGTCTGCTTACTATTGTACAATAATATAGTTGGCGTTGTCGCGGGCAGGGAAATCCAAATCGCAAATGGCCTCAGACTGCATACGCTTTACGCCATACCTGCTGAAGTCATTAAACTTGCTGATGCTCAAATAGCGCGACGGGGCCCCGAACTGGTAAACGTGGCGGCAGCCGTAAGTCTCCCGACTGTCTTCACACTTATACACGCCCGCTATAGAGAGGCAGTCCGGGATCCGAGTAATACGTCCATAGCAAGGCCTCACTCGCATGGAGGAAATTCGATGAAGGTTAATAACAATATAGACAGACAGAAATAAATGCTAAAATTACGCCAACGACTTGTAATACCCCACCCGTAAGAGTGCGAGACCGCGCTGAGCATATACGACGAGATTTGCTGTGCGTAACCTACGGGGAATGCACAGTTTTGCTGTCATTGAGGAGATATG'
def hamming_distance(seqA, seqB):
	
	if(len(seqA) != len(seqB)):
		print("Error calculating Hamming distance: provided DNA sequences are not equal in length!")
		return -1

	counter = 0
	distance = 0
	for nucleotide in seqA:
		if(nucleotide != "A" and nucleotide != "T" and nucleotide != "G" and nucleotide != "C"):
			print("Error calculating Hamming distance: malformed DNA sequence.")
			return -1
		if(nucleotide != seqB[counter]):
			distance += 1
		counter += 1
	print(distance)

a= hamming_distance(seqA, seqB)
